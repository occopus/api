#!/usr/bin/env python

# Copyright (C) 2015 MTA SZTAKI

"""

cccopus-maintain
~~~~~~~~~~~~~~~~

This script manages an infrastructure identified by infra_id. It can also list
active infrastructures managed by occopus by using the --list or -l flag.

An infra_id is required.

Author: Jozsef Kovacs
"""

import occo.api.occoapp as occoapp
import occo.infobroker as ib
import time
import occo.util as util
import traceback

def setup_args(cfg):
    cfg.add_argument('-i','--infraid' , 
                     dest='infraid', 
                     help='identifier of infrastructure to manage')
    cfg.add_argument('-l','--list'    , 
                     dest='list'  , action='store_true',
                     help='lists active infrastructures')
    cfg.add_argument('-t','--interval', 
                     dest='interval', type=float, default=10,
                     help='specifies the time between management sessions')
    cfg.add_argument('-c','--cyclic'  , 
                     dest='cyclic', action='store_true',
                     help='performs continuous management')
    cfg.add_argument('-r','--report', 
                     dest='report', action='store_true',
                     help='reports about infrastructure')
    cfg.add_argument('--parallelize',
                     action='store_const', dest='strategy',
                     const='parallel', default='sequential',
                     help='parallelize processing instructions')
    cfg.add_argument('-o','--output', 
                     dest='output',  
                     help='defines output file name for reporting')
    cfg.add_argument('-f','--filter', 
                     dest='filter',  
                     help='defines a nodename to be included in reporting')

if __name__ == '__main__':

    occoapp.setup(setup_args)

    import logging
    log = logging.getLogger('occo')
    datalog = logging.getLogger('occo.data')

    if not occoapp.args.infraid:
        if occoapp.args.list:
            if not util.Infralist().get():
                print("No active infrastructure!")
            else:
                print("List of active infrastructure:")
            for i in util.Infralist().get():
                print(i)
            exit(0)
        else:
           print("ERROR: No infra_id (-i) specified! ")
           exit(1)

    from occo.infraprocessor import InfraProcessor
    from occo.enactor import Enactor
    infraprocessor = InfraProcessor.instantiate(protocol='basic', process_strategy=occoapp.args.strategy)
    enactor = Enactor(occoapp.args.infraid, infraprocessor)

    if occoapp.args.report:
        state = ib.main_info_broker.get('infrastructure.state', occoapp.args.infraid)
        if occoapp.args.output:
          log.info('Saving list of node addresses to file \"%s\"...', occoapp.args.output)
          with open(occoapp.args.output, 'w') as report_file_handler:
            for nodename in state:
              for node in state[nodename]:
                if (not occoapp.args.filter) or (occoapp.args.filter in nodename):
                  if isinstance(state[nodename][node]['resource_address'],list):
                    report_file_handler.write(str(state[nodename][node]['resource_address'][0]))
                    for ip in state[nodename][node]['resource_address'][1:]:
                      report_file_handler.write(' '+str(ip))
                    report_file_handler.write('\n')
                  else:
                    report_file_handler.write(str(state[nodename][node]['resource_address'])+'\n')
          log.info('Done.')
        else:
          log.info('Report list of nodes/instances/addresses:')
          for nodename in state:
            if (not occoapp.args.filter) or (occoapp.args.filter in nodename):
              log.info('%s:',nodename)
              for node in state[nodename]:
                log.info('  %s:',node)
                if isinstance(state[nodename][node]['resource_address'],list):
                  for ip in state[nodename][node]['resource_address']:
                    log.info('    %s',ip)
                else:
                  log.info('    %s',state[nodename][node]['resource_address'])
    else:
        try:
            while True:
                enactor.make_a_pass()
                if not occoapp.args.cyclic:
                    break
                time.sleep(occoapp.args.interval)
        except KeyboardInterrupt:
            log.info('Ctrl+C - exiting.')
            infraprocessor.cancel_pending()
        except Exception as ex:
            log.error('Unexpected error:')
            log.debug(traceback.format_exc())
            log.error(str(ex))
            exit(1)

